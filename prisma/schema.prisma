// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  username String
  email String @unique
  password String

  projects Project[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Project {
  id String @id @default(cuid())
  name String
  description String?
  slug String @unique
  database Database?
  ApiKey ApiKey[]
  Bucket Bucket[]
  AuthUser AuthUser[]

  creatorId String
  creator User @relation(fields: [creatorId],references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AuthUser {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Database {
  id String @id @default(cuid())
  name String @unique
  projectId String @unique
  project Project @relation(fields: [projectId],references: [id])
  tables Table[]
  DatabaseApiKey DatabaseApiKey[]
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

}

model Table {
  id String @id @default(cuid())
  name String

  databaseId String
  database Database @relation(fields: [databaseId],references: [id])
  userSchema Json?
  columns Column[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Column {
  id         String   @id @default(cuid())
  name       String
  type       String   
  isNullable Boolean  @default(false)
  isPrimary  Boolean  @default(false)
  isForeignKey Boolean  @default(false)
  foreignTableId String? 
  foreignColumnId String?
  tableId    String
  table      Table    @relation(fields: [tableId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model DatabaseApiKey {
  id        String   @id @default(cuid())
  name      String   @unique
  key       String   @unique
  databaseId String
  database   Database  @relation(fields: [databaseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id        String   @id @default(cuid())
  name String @unique
  key       String   @unique
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bucket {
  id        String   @id @default(cuid())
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])

  files     File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        String   @id @default(cuid())
  bucketId  String
  bucket    Bucket   @relation(fields: [bucketId], references: [id])

  name      String
  url       String
  size      Int
  mimeType  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}